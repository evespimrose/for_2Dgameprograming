1.

  1.1 git의 개념

    git은 분산 버전 관리 툴을 의미합니다. 어떠한 팀 프로젝트를 진행할 때, 자신과 동료(혹은 이전의 자신이)가 올려놓은 기존의 코드에서 자신이 무언가를 변경하고 저장할 때 겹쳐쓰이거나 지워지는 것들을 방지해, 이전에 만들어진 모든 변경사항의 "스냅샷"을 저장하기 때문에, 이전의 어떤 버전으로든 되돌릴 수 있습니다.

    로컬 저장소는 git이 관리하는 세 그루의 나무로 이루어져 있습니다.

      첫째 나무 작업 디렉토리(Working directory)는 실제 파일들로 이루어져 있고,

      둘째 나무 인덱스(Index)는 준비 영역(starting area)의 역할을 하며,

      셋째 나무인 HEAD는 최종 확정본(commit)을 나타냅니다.

  git으로 할 수 있는 것

      GitHub는 git을 지원하는 서비스 중 가장 유명한 git을 사용하는 프로젝트를 지원하는 웹호스팅 서비스 입니다. 깃허브는 로컬 저장소에서 자신의 프로젝트를 관리할 수 있도록 비주얼 인터페이스를 제공합니다. 깃허브 사이트에서 계정을 생성하면 웹에서 프로젝트를 버전관리 할 수 있습니다.

  주요 명령어

    git init : 깃 저장소를 초기화.

    git config : 처음에 깃을 설정할 때 가장 유용합니다.

    git help : 명령어를 잊어버렸을때 이 명령어를 입력하면 가장 많이 사용하는 21개의 깃 명령어들을 보여줍니다.

    git status : 저장소의 상태를 체크합니다. 어떤 파일이 저장소 안에 있는지, 커밋이 필요한 변경사항이 있는지, 현재 저장소의 어떤 브랜치에서 작업하고 있는지 등을 볼 수 있습니다.

    git add : 이 명령이 저장소에 새 파일들을 추가하진 않지만, 깃이 새 파일들을 '지켜보게' 합니다. 파일을 추가하면, 깃의 저장소 '스냅샷(분기)'에 포함됩니다.

    git commit : 어떠한 변경사항을 만든 후, 저장소의 '스냅샷'을 찍기 위한 명령어입니다.

    git branch : 여러 팀원들과 작업을 하지만 자신만의 변경을 원한다면 이 명령어는 새로운 브랜치를 만들고 자신만의 파일 추가 등의 커밋 타임라인을 만듭니다.

    git checkout : 자신이 현재 위치하고 있지 않은 저장소를 체크아웃 합니다. master 브랜치를 보고싶으면 git checkout master라 입력하면 됩니다.

    git merge : 자신의 브랜치에서 작업을 끝내고, 모든 팀원이 볼 수 있는 master 브랜치로 병합하는 명령어입니다.

    git push : 로컬 컴퓨터에서 작업하고 자신의 커밋을 깃허브에서 온라인으로도 볼 수 있도록 하는 명령어입니다.

    git pull : 로컬 컴퓨터에서 작업할 때, 작업하고 있는 저장소의 최신 버전을 원하면, 이 명령어로 깃허브로부터 변경사항을 다운로드 합니다.

  

  

  

2. 초간단 파이썬(1) 문서를 읽고 코드를 따라 쳐 보거나 변형해서도 해 본 후, 결과를 본문에 입력, 느낌을 적어봅니다.

Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)] on win32

Type "help", "copyright", "credits" or "license()" for more information.

>>> 

>>> 1+2

3

>>> 100-1

99

>>> 7*52

364

>>> 1024/8

128.0

>>> 

>>> 1/2

0.5

>>> 1//2

0

>>> 4/3

1.3333333333333333

>>> 4//3

1

>>> 7%3

1

>>> 7.5%3

1.5

>>> 4%2.1

1.9

>>> 

>>> 

>>> 

>>> 3.141596 * (3 * 3)

28.274364

>>> 3.141596 * 3 **2

28.274364

>>> 

>>> 3.141596 * (9**2)

254.46927599999998

>>> 

>>> 3.141596 * (20 ** 2)

1256.6383999999998

>>> 3.141596 * (1.5 ** 2)

7.068591

>>> 

>>> 

>>> pi = 3.141596

>>> 

>>> pi * 4 ** 2

50.265536

>>> pi * 2.5 **2

19.634974999999997

>>> pi * 8 ** 2

201.062144

>>> 

>>> 

>>> print(pi)

3.141596

>>> 

>>> 

>>> 

>>> 

>>> r = 7

>>> 

>>> area = pi * r ** 2

>>> 

>>> print(area)

153.93820399999998

>>> 

>>> r = 11

>>> 

>>> area = pi * r ** 2

>>> 

>>> print(area)

380.133116

>>> 

>>> 

>>> 

>>> name1 = "Trump"

>>> name2 = '강다니엘'

>>> 

>>> 

>>> 

>>> print(name1)

Trump

>>> print(name2)

강다니엘

>>> 

>>> 

>>> order = 4

>>> pi = 3.141592

>>> 

>>> name = "Trump"

>>> 

>>> type(order)

<class 'int'>

>>> type(pi)

<class 'float'>

>>> type(name)

<class 'str'>

>>> 

>>> 4 > 3

True

>>> 3.5 < -1.3

False

>>> 100 == 100

True

>>> 10 >= 10

True

>>> a = 365 > 366

>>> print(a)

False

>>> type(a)

<class 'bool'>

>>> 

>>> 

>>> tirst = "Daehyun"

>>> first = "Daehyun"

>>> last = "Lee"

>>> name = first + " " + last

>>> name

'Daehyun Lee'

>>> print(name)

Daehyun Lee

>>> name * 2

'Daehyun LeeDaehyun Lee'

>>> name *5

'Daehyun LeeDaehyun LeeDaehyun LeeDaehyun LeeDaehyun Lee'

>>> 

>>> name[0]

'D'

>>> name[3]

'h'

>>> name[-1]

'e'

>>> name[-2]

'e'

>>> 

>>> title = "Python 2D Game Programming"

>>> title[0:6]

'Python'

>>> title[7:9]

'2D'

>>> title[10:14]

'Game'

>>> title[:6]

'Python'

>>> title[-11:]

'Programming'

>>> title[::2]

'Pto DGm rgamn'

>>> title[::-1]

'gnimmargorP emaG D2 nohtyP'

>>> 

>>> twice = ['momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> black_pink = ['jisu','jeni','rose','risa']

>>> 

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> twice.append('jihyo')

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun', 'jihyo']

>>> twice.sort()

>>> twice

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi']

>>> len(twice)

6

>>> unite = twice + black_pink

>>> unite

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite.remove('momo')

>>> unite

['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> 

>>> unite[0]

'dahyun'

>>> unite[-1]

'risa'

>>> unite[:3]

['dahyun', 'jihyo', 'nayun']

>>> unite[-3:]

['jeni', 'rose', 'risa']

>>> 

>>> score = { 'momo' : 80, 'zwi' = 85, 'sana' : 98 }

SyntaxError: invalid syntax

>>> type(score)

Traceback (most recent call last):

  File "<pyshell#121>", line 1, in <module>

    type(score)

NameError: name 'score' is not defined

>>> score = { 'momo' : 80, 'zwi' : 85, 'sana' : 98 }

>>> type(score)

<class 'dict'>

>>> score['momo']

80

>>> score['nayun'] = 100

>>> score

{'momo': 80, 'zwi': 85, 'sana': 98, 'nayun': 100}

>>> del score['momo']

>>> score

{'zwi': 85, 'sana': 98, 'nayun': 100}

>>> score.keys()

dict_keys(['zwi', 'sana', 'nayun'])

>>> score,values()

Traceback (most recent call last):

  File "<pyshell#131>", line 1, in <module>

    score,values()

NameError: name 'values' is not defined

>>> score.values()

dict_values([85, 98, 100])

>>> 

>>> 'zwi' in score

True

>>> 'momo' in score

False

>>> 

>>> score.clear()

>>> score

{}

>>> 

>>> t1 = (1,2,3)

>>> t2 = (1, )

>>> t3 = ()

>>> t4 = 1,2,3,4

>>> t4

(1, 2, 3, 4)

>>> type(t4)

<class 'tuple'>

>>> t5 = (1, 'a', "park", (1,2))

>>> t1[1:]

(2, 3)

>>> t1 + t5

(1, 2, 3, 1, 'a', 'park', (1, 2))

>>> t4 * t4

Traceback (most recent call last):

  File "<pyshell#149>", line 1, in <module>

    t4 * t4

TypeError: can't multiply sequence by non-int of type 'tuple'

>>> t4 * 2

(1, 2, 3, 4, 1, 2, 3, 4)

>>> 

>>> s1 = {1,2,3}

>>> type(s1)

<class 'set'>

>>> s1 = {1,2,2,4}

>>> s1

{1, 2, 4}

>>> l1 = [1.2.2.2.2.3.3.3.4,5,5,5,5,5]

SyntaxError: invalid syntax

>>> l1 = [1,2,2,2,2,2,3,3,3,4,5,5,5,5,5]

>>> s1 = set(l1)

>>> s1

{1, 2, 3, 4, 5}

>>> s2 = {3,5,6,7}

>>> s1 + s2

Traceback (most recent call last):

  File "<pyshell#161>", line 1, in <module>

    s1 + s2

TypeError: unsupported operand type(s) for +: 'set' and 'set'

>>> s1 | s2

{1, 2, 3, 4, 5, 6, 7}

>>> s1 & s2

{3, 5}

>>> s2 - s1

{6, 7}

>>> s1 - s2

{1, 2, 4}

>>> s1.add(8)

>>> s1

{1, 2, 3, 4, 5, 8}

>>> s2.remove(6)

>>> s2

{3, 5, 7}

>>> 

  

  느낀 점으로는, 지금까지 해왔던 C보다는 변수 선언이나 계산을 하려고 명령할 때, 확실히 객체지향 프로그래밍 방식은 파이썬을 이용하는 것이 좀더 간결하고 읽기 편한 것 같습니다. 하지만, C와 다르게 쓰이거나 아예 새로운 명령어들이 몇 있는것 같아 좀더 공부해 숙지하는 것이 필요할 것 같습니다.